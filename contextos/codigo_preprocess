# Detector de PlÃ¡gio e ParÃ¡frase

Este projeto implementa um sistema para **comparar textos** por duas abordagens complementares:  
- **LÃ©xica** â€“ anÃ¡lise baseada em padrÃµes de palavras (TF-IDF e n-gramas).  
- **SemÃ¢ntica** â€“ anÃ¡lise baseada no significado (embeddings com `sentence-transformers`).  

O objetivo Ã© combinar essas anÃ¡lises para obter uma avaliaÃ§Ã£o robusta da similaridade textual, Ãºtil para detecÃ§Ã£o de plÃ¡gio, identificaÃ§Ã£o de parÃ¡frases e comparaÃ§Ã£o de conteÃºdos de domÃ­nio pÃºblico.  

O projeto foi pensado para rodar **tanto localmente quanto via Docker**, garantindo que o ambiente seja reprodutÃ­vel e que os resultados sejam consistentes.

---

import pytest
from src import preprocess


# ğŸ”¹ Testa divisÃ£o simples de palavras preservando pontuaÃ§Ã£o e capitalizaÃ§Ã£o
def test_split_words_basic():
    text = "OlÃ¡, Mundo!"
    words = preprocess._split_words(text)
    assert words == ["OlÃ¡,", "Mundo!"]

# ğŸ”¹ Testa divisÃ£o com string vazia
def test_split_words_empty():
    assert preprocess._split_words("") == []


# ğŸ”¹ Testa construÃ§Ã£o de janelas com stride menor que window_size
def test_build_windows_stride_small():
    text = "um dois trÃªs quatro cinco seis"
    result = preprocess.build_windows(text, window_size=3, stride=2)
    assert len(result) > 0
    # Primeira janela
    assert result[0]["text"] == "um dois trÃªs"
    assert result[0]["start_word"] == 0
    assert result[0]["end_word"] == 3
    # Segunda janela deve comeÃ§ar no Ã­ndice 2
    assert result[1]["start_word"] == 2


# ğŸ”¹ Testa construÃ§Ã£o de janelas com stride igual ao window_size
def test_build_windows_stride_equals_window():
    text = "a b c d e f"
    result = preprocess.build_windows(text, window_size=2, stride=2)
    assert len(result) == 3  # 6 palavras / 2 por janela
    assert result[0]["text"] == "a b"
    assert result[1]["text"] == "c d"
    assert result[2]["text"] == "e f"


# ğŸ”¹ Testa construÃ§Ã£o de janelas quando window_size Ã© maior que nÃºmero de palavras
def test_build_windows_window_size_large():
    text = "um dois trÃªs"
    result = preprocess.build_windows(text, window_size=10, stride=1)
    assert len(result) == 1
    assert result[0]["text"] == "um dois trÃªs"


# ğŸ”¹ Testa comportamento com texto vazio ou window_size <= 0
def test_build_windows_edge_cases():
    assert preprocess.build_windows("", window_size=3, stride=1) == []
    assert preprocess.build_windows("texto", window_size=0, stride=1) == []


# ğŸ”¹ Testa extensÃ£o de contexto com margem dentro dos limites
def test_extend_context_basic():
    text = "um dois trÃªs quatro cinco"
    result = preprocess.extend_context(text, start_word=1, end_word=3, margin=1)
    assert result == "um dois trÃªs quatro"


# ğŸ”¹ Testa extensÃ£o de contexto com margem que ultrapassa limites do texto
def test_extend_context_limits():
    text = "um dois trÃªs"
    result = preprocess.extend_context(text, start_word=0, end_word=2, margin=5)
    assert result == "um dois trÃªs"
